# DEIM/configs/dataset/byu_slice_detection.yml
task: detection

# 클래스: 0 (배경), 1 (모터) - DEIM은 보통 배경 클래스를 마지막에 두므로, num_classes=1로 설정하고 모델 내부에서 +1 처리하거나, num_classes=2로 명시
# 여기서는 num_classes=2로 가정 (모터=1, 배경=0 또는 그 반대 - 모델 구현 확인 필요)
# DEIMCriterion의 num_classes는 실제 객체 클래스 수만 의미하므로 1로 설정할 수도 있음.
# 여기서는 편의상 num_classes: 2로 하고, 모터 클래스 ID를 0 또는 1로 사용 (DEIM 기본값은 배경 클래스를 포함하지 않음).
# COCO는 80개 객체 클래스. 우리 대회는 모터 1개. 따라서 num_classes: 1 (모터)로 설정하고, 배경은 암묵적으로 처리되거나 0번으로 자동 할당될 수 있음.
# DEIMCriterion의 num_classes는 실제 객체 클래스 수를 의미. 여기선 모터 하나이므로 1.
num_classes: 1 # 모터 단일 클래스
remap_mscoco_category: False # COCO 카테고리 리맵핑 사용 안 함

train_dataloader:
  type: DataLoader # engine/data/dataloader.py 에 등록된 DataLoader
  dataset:
    type: BYUDataset2DSlices # Phase 2에서 만들 커스텀 2D 슬라이스 데이터셋
    data_dir: ./  # .npy 파일들이 있는 상위 폴더 (실제 DEIM 폴더 내 상대 경로)
    ann_file_name: train_labels.csv
    voxel_spacing_file_name: train_voxel_spacing.csv # 원본 복셀 간격 정보
    original_labels_file_name: train_labels_original.csv # data_dir 내의 파일명
    is_train: True
    # transforms는 메인 설정 파일에서 DEIM 기본 2D 증강 사용
    transforms:
      type: Compose
      # ops: ~ # 메인 설정에서 오버라이드
  shuffle: True
  num_workers: 0 # 환경에 맞게 조절 (12)
  drop_last: True
  collate_fn:
    type: BatchImageCollateFunction # 기존 2D collate 함수

val_dataloader:
  type: DataLoader
  dataset:
    type: BYUDataset2DSlices
    data_dir: ./
    ann_file_name: train_labels.csv             # 이 이름으로 통일
    voxel_spacing_file_name: train_voxel_spacing.csv
    original_labels_file_name: train_labels_original.csv
    is_train: False
    transforms:
      type: Compose # 검증 시에는 최소한의 변환만
      ops:
        # - {type: ConvertPILImage, dtype: 'float32', scale: True} # Dataset에서 Tensor로 반환 시 불필요
        - {type: Resize, size: [512, 512]} # 입력 크기 일치 확인
        # - {type: ConvertBoxes, fmt: 'cxcywh', normalize: True} # 필요시 박스 포맷 변환
        - {type: Normalize, mean: [0.485, 0.456, 0.406], std: [0.229, 0.224, 0.225]}
  shuffle: False
  num_workers: 0 #12
  drop_last: False
  collate_fn:
    type: BatchImageCollateFunction

evaluator:
  type: BYU2DEvaluator # Phase 5에서 만들 커스텀 2D 슬라이스 기반 평가기
  # 평가 시 필요한 파라미터 (예: 최종 3D 결과 도출 및 물리적 거리 계산용)
  distance_threshold_angstroms: 1000
  # Z 좌표 결정 방식, 신뢰도 임계값 등은 Evaluator 내부 로직으로 처리